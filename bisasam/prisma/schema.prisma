generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  bio        String? @db.VarChar(255)
  blockedBy  User[]  @relation("user1_blocked_user2", references: [id])
  blocked    User[]  @relation("user1_blocked_user2", references: [id])
  followedBy User[]  @relation("user1_follows_user2", references: [id])
  following  User[]  @relation("user1_follows_user2", references: [id])

  user_creates_group user_creates_group[]
  user_in_group      user_in_group[]
  user_liked_comment user_liked_comment[] @ignore
  user_liked_content user_liked_content[]
  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model content {
  content_id         Int                  @unique @default(autoincrement())
  content_text       String?              @db.Text
  createdAt          DateTime             @default(now()) @map(name: "created_at")
  user_id            Int
  image_id           Int?
  user_liked_content user_liked_content[]
}

model group_chat {
  group_id           Int                  @unique @default(autoincrement())
  group_name         String               @db.VarChar(30)
  group_description  String?              @db.VarChar(255)
  user_creates_group user_creates_group[]
  user_in_group      user_in_group[]
}

model image {
  img_id Int    @unique @default(autoincrement())
  url    String @db.VarChar(255)
}

model message {
  message_id   Int      @unique @default(autoincrement())
  createdAt    DateTime @default(now()) @map(name: "created_at")
  text_message String   @db.VarChar(255)
  user_id      Int
  group_id     Int
}

model user_comment {
  comment_id         Int                  @unique @default(autoincrement())
  content_id         Int
  comment_text       String               @db.VarChar(255)
  createdAt          DateTime             @default(now()) @map(name: "created_at")
  user_id            Int
  user_liked_comment user_liked_comment[] @ignore
}

model user_creates_group {
  user     User       @relation(fields: [user_id], references: [id])
  user_id  Int
  group    group_chat @relation(fields: [group_id], references: [group_id])
  group_id Int

  @@id([user_id, group_id])
}

model user_in_group {
  user     User       @relation(fields: [user_id], references: [id])
  user_id  Int
  group    group_chat @relation(fields: [group_id], references: [group_id])
  group_id Int

  @@id([user_id, group_id])
}

model user_liked_comment {
  user_id    Int
  comment_id Int
  user       User         @relation(fields: [user_id], references: [id])
  comment    user_comment @relation(fields: [comment_id], references: [comment_id])

  @@id([user_id, comment_id])
}

model user_liked_content {
  user_id    Int
  content_id Int
  user       User    @relation(fields: [user_id], references: [id])
  content    content @relation(fields: [content_id], references: [content_id])

  @@id([user_id, content_id])
}
