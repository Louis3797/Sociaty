generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Content {
  id               String               @id @default(cuid())
  content_text     String?              @db.Text
  created_at       DateTime             @default(now()) @db.Timestamp(0)
  userId           String
  image_id         String?
  image            Image?               @relation(fields: [image_id], references: [id])
  user             User                 @relation(fields: [userId], references: [id])
  liked            User_liked_content[]
  comments         Comment[]
  numLikes         Int                  @default(0)
  numComments      Int                  @default(0)
  gif_url          String?
  ContentOnHashtag ContentOnHashtag[]
}

model Group {
  id                String          @id @default(cuid())
  group_name        String          @db.VarChar(30)
  group_description String?         @db.VarChar(255)
  admin_id          String
  messages          Message[]
  user_in_group     User_in_group[]
}

model Image {
  id      String   @id @default(cuid())
  url     String   @db.VarChar(255)
  content Content?
  message Message?
}

model Message {
  id           String   @id @default(cuid())
  created_at   DateTime @default(now()) @db.Timestamp(0)
  text_message String?  @db.VarChar(255)
  userId       String
  group_id     String
  image_id     String?
  gif_url      String?
  users        User     @relation(fields: [userId], references: [id])
  chat         Group    @relation(fields: [group_id], references: [id])

  image Image? @relation(fields: [image_id], references: [id])

}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Hashtag {
  id               String             @id @default(cuid())
  text             String
  CommentOnHashtag CommentOnHashtag[]
  ContentOnHashtag ContentOnHashtag[]
}

model CommentOnHashtag {
  hashtagId String
  commentId String
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([hashtagId, commentId])
}

model ContentOnHashtag {
  hashtagId String
  contentId String
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])
  content   Content @relation(fields: [contentId], references: [id])

  @@id([hashtagId, contentId])
}

model Comment {
  id                 String               @id @default(cuid())
  content_id         String
  comment_text       String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(0)
  userId             String
  user_liked_comment User_liked_comment[]
  numLikes           Int                  @default(0)
  content            Content              @relation(fields: [content_id], references: [id])
  gif_url            String?
  CommentOnHashtag   CommentOnHashtag[]
}

model User_in_group {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  chat     Group  @relation(fields: [group_id], references: [id])
  group_id String

  @@id([userId, group_id])
}

model User_liked_comment {
  userId     String
  comment_id String
  user       User    @relation(fields: [userId], references: [id])
  comment    Comment @relation(fields: [comment_id], references: [id])

  @@id([userId, comment_id])
}

model User_liked_content {
  userId     String
  content_id String
  user       User    @relation(fields: [userId], references: [id])
  content    Content @relation(fields: [content_id], references: [id])

  @@id([userId, content_id])
}

model User {
  id               String               @id @default(cuid())
  name             String
  displayName      String?              @default(cuid()) @db.VarChar(25)
  email            String               @unique
  emailVerified    DateTime?
  created_at       DateTime             @default(now()) @db.Timestamp(0)
  updatedAt        DateTime             @updatedAt
  image            String               @db.VarChar(255)
  bannerUrl        String?              @db.VarChar(255)
  bio              String?              @db.VarChar(255)
  numFollowing     Int                  @default(0)
  numFollowers     Int                  @default(0)
  online           Boolean?             @default(false)
  numContributions Int                  @default(0)
  content          Content[]
  messages         Message[]
  liked_content    User_liked_content[]
  in_group         User_in_group[]
  liked_comments   User_liked_comment[]
  blockedBy        User[]               @relation("user1_blocked_user2", references: [id])
  blocked          User[]               @relation("user1_blocked_user2", references: [id])
  followedBy       User[]               @relation("user1_follows_user2", references: [id])
  following        User[]               @relation("user1_follows_user2", references: [id])
  accounts         Account[]
  sessions         Session[]


}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
